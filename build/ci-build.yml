name: $(date:yyyyMMdd)$(rev:rr)

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - src/*

pr:
  paths:
    include:
    - src/*
    - build/ci-build.yml


stages:
  - stage: Prereqs
    displayName: 'Install pre requisites'
    jobs:
      - job: Install
        displayName: 'Install all python packages'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.7'
            addToPath: true
            architecture: 'x64'

        - script: python -m pip install --upgrade pip setuptools wheel
          displayName: 'Install tools'

        - script: pip install -r src/requirements.txt
          displayName: 'Install requirements'

        - script: |
            pip install pytest
            pip install pytest-cov
          displayName: 'Install pytest'

        - script: python -m pip install --upgrade twine
          displayName: 'Install Twine'
  - stage: Build_Test
    dependsOn: Prereqs
    jobs:
      - job: Set_version_number
        displayName: 'Set dynamic version number'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: 'sed -i ''s/0.0.2/0.0.2.dev$(Build.BuildNumber)/g'' src/arcus/__init__.py'
            failOnStderr: true
      - job: Run_unit_tests
        dependsOn: Set_version_number
        displayName: 'Run unit tests'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - script: |
            pytest src/tests --doctest-modules --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html
          displayName: 'Unit tests (pytest)'

        - task: PublishTestResults@2
          condition: succeededOrFailed()
          inputs:
            testResultsFiles: '**/test-*.xml'
            testRunTitle: 'Publish test results for Python $(python.version)'

        - task: PublishCodeCoverageResults@1
          inputs:
            codeCoverageTool: Cobertura
            summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
            reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'
  - stage: Package_Deploy
    dependsOn: Build_Test
    jobs:
      - job: Create_package
        displayName: 'Create wheel packages'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - script: |    
            python src/setup.py bdist_wheel 
          displayName: 'Build wheels'
      - job: Publish_prerelease_package
        dependsOn: Create_package
        displayName: 'Create pre release package'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - task: TwineAuthenticate@1
          inputs:
            pythonUploadServiceConnection: 'Arcus AzureML PyPi feed'

        - script: |
            python -m twine upload --skip-existing --verbose -r 'arcus-azureml' --config-file $(PYPIRC_PATH) dist/*.whl
          displayName: 'Publish to PyPi dev'
  - stage: Publish_Artifacts
    dependsOn: Package_Deploy
    jobs:
      - job: Publish
        displayName: 'Publish build artifacts'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - task: CopyFiles@2  
          inputs:    
            targetFolder: $(Build.ArtifactStagingDirectory)
        - task: PublishBuildArtifacts@1  
          inputs:    
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'                  
            ArtifactName: 'dist'    
            publishLocation: 'Container'